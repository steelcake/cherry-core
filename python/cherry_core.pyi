from typing import List, Tuple
import pyarrow

def cast(map: List[Tuple[str, str]], data: pyarrow.RecordBatch, allow_cast_fail: bool) -> pyarrow.RecordBatch: ...

def cast_schema(map: List[Tuple[str, str]], schema: pyarrow.Schema) -> pyarrow.Schema: ...

def encode_hex(data: pyarrow.RecordBatch) -> pyarrow.RecordBatch: ...

def encode_prefix_hex(data: pyarrow.RecordBatch) -> pyarrow.RecordBatch: ...

def hex_encode_column(col: pyarrow.Array) -> pyarrow.Array: ...

def prefix_hex_encode_column(col: pyarrow.Array) -> pyarrow.Array: ...

def hex_decode_column(col: pyarrow.Array) -> pyarrow.Array: ...

def prefix_hex_decode_column(col: pyarrow.Array) -> pyarrow.Array: ...

def schema_binary_to_string(schema: pyarrow.Schema) -> pyarrow.Schema: ...

def u256_from_binary(col: pyarrow.Array) -> pyarrow.Array: ...

def u256_to_binary(col: pyarrow.Array) -> pyarrow.Array: ...

def evm_decode_call_inputs(signature: str, data: pyarrow.Array, allow_decode_fail: bool) -> pyarrow.RecordBatch: ...

def evm_decode_call_outputs(signature: str, data: pyarrow.Array, allow_decode_fail: bool) -> pyarrow.RecordBatch: ...

def evm_decode_events(signature: str, data: pyarrow.Array, allow_decode_fail: bool) -> pyarrow.RecordBatch: ...

def evm_event_signature_to_arrow_schema(signature: str) -> pyarrow.Schema: ...

def evm_transaction_signature_to_arrow_schemas(signature: str) -> Tuple[pyarrow.Schema, pyarrow.Schema]: ...

def evm_validate_block_data(blocks: pyarrow.RecordBatch, transactions: pyarrow.RecordBatch, logs: pyarrow.RecordBatch, traces: pyarrow.RecordBatch): ...

def evm_signature_to_topic0(signature: str) -> str: ...

